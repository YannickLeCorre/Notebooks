[
["index.html", "R Notebooks in a book Preface", " R Notebooks in a book Yannick Le Corre 2018-12-31 Preface TODO "],
["r.html", "Chapter 1 R 1.1 conference 2018 1.2 Sams Teach Yourself R 1.3 Advanced R", " Chapter 1 R 1.1 conference 2018 library(knitr) knitr::opts_chunk$set(warning=FALSE, message=FALSE) by Emily Robinson (DataCamp) at the 2018 New York R Conference Les packages de l’écosystème tidyverse sont décrits dans le diagramme 1. Noter que leaflet ne fait pas partie de tidyverse. data anlysis workflow (draw.io) 1.1.1 make a toy dataset library(tibble) df &lt;- tribble( ~date, ~whatever, ~numstuff1, ~numstuff2, ~multi_value, &quot;10-09-2017&quot;, .1, 5, NA, &quot;val1, val2, val3&quot;, &quot;10-09-2017&quot;, .5, 1, 3, &quot;val1&quot;, &quot;11-09-2017&quot;, .2, 3, 2, &quot;val1, val2&quot;, &quot;12-09-2017&quot;, .5, Inf, 3, &quot;val1, val2, val3, val4&quot; ) df ## # A tibble: 4 x 5 ## date whatever numstuff1 numstuff2 multi_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 10-09-2017 0.1 5 NA val1, val2, val3 ## 2 10-09-2017 0.5 1 3 val1 ## 3 11-09-2017 0.2 3 2 val1, val2 ## 4 12-09-2017 0.5 Inf 3 val1, val2, val3, val4 Examine your NAs and empty values library(purrr) df %&gt;% purrr::map_df(~sum(is.na(.))) # count the NA for every columns of a DF ## # A tibble: 1 x 5 ## date whatever numstuff1 numstuff2 multi_value ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 0 0 0 1 0 library(dplyr) df &lt;- df %&gt;% na_if(Inf) # convert empty values into NA values df ## # A tibble: 4 x 5 ## date whatever numstuff1 numstuff2 multi_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 10-09-2017 0.1 5 NA val1, val2, val3 ## 2 10-09-2017 0.5 1 3 val1 ## 3 11-09-2017 0.2 3 2 val1, val2 ## 4 12-09-2017 0.5 NA 3 val1, val2, val3, val4 1.1.2 Examine your numeric columns library(skimr) df %&gt;% select_if(is.numeric) %&gt;% skimr::skim() # summary of all the numeric columns ## Skim summary statistics ## n obs: 4 ## n variables: 3 ## ## -- Variable type:numeric ------------------------------------------------------------------------------------------------------------------- ## variable missing complete n mean sd p0 p25 p50 p75 p100 hist ## numstuff1 1 3 4 3 2 1 2 3 4 5 &lt;U+2587&gt;&lt;U+2581&gt;&lt;U+2581&gt;&lt;U+2587&gt;&lt;U+2581&gt;&lt;U+2581&gt;&lt;U+2581&gt;&lt;U+2587&gt; ## numstuff2 1 3 4 2.67 0.58 2 2.5 3 3 3 &lt;U+2583&gt;&lt;U+2581&gt;&lt;U+2581&gt;&lt;U+2581&gt;&lt;U+2581&gt;&lt;U+2581&gt;&lt;U+2581&gt;&lt;U+2587&gt; ## whatever 0 4 4 0.32 0.21 0.1 0.18 0.35 0.5 0.5 &lt;U+2583&gt;&lt;U+2583&gt;&lt;U+2581&gt;&lt;U+2581&gt;&lt;U+2581&gt;&lt;U+2581&gt;&lt;U+2581&gt;&lt;U+2587&gt; 1.1.3 Tidy columns containing colon separated values library(tidyr) library(stringr) df &lt;- df %&gt;% mutate(colonne = str_split(multi_value, &quot;,&quot;)) %&gt;% # transform into a list of characters unnest() # split into seperate observations 1.1.4 plot uncluttered bar charts library(ggplot2) library(forcats) df %&gt;% count(date) %&gt;% mutate(date = fct_reorder(date, n)) %&gt;% # ordonne les colonnes en ordre décroissant ggplot(aes(x = date, y = n)) + geom_col() + coord_flip() 1.2 Sams Teach Yourself R By Andy Nicholls, Richard Pugh, &amp; Aimee Gott (first edition dec 2015) object types 4 modes (fonction mode()): • numeric • character • boolean • complex 3 types (fonction class()): • vector (c’est le type de base) - attributes length et names • matrix/array - attribut dim • list 1.2.1 cut et split cut est utilisé pour classer des données numériques en facteur numeric_matrix &lt;- 1:100 mycut1 &lt;- cut(numeric_matrix, 3) # classifie les données selon trois classes de valeurs égales head(mycut1) ## [1] (0.901,34] (0.901,34] (0.901,34] (0.901,34] (0.901,34] (0.901,34] ## Levels: (0.901,34] (34,67] (67,100] table(mycut1) ## mycut1 ## (0.901,34] (34,67] (67,100] ## 34 33 33 On peut aussi couper selon des classes numériques spécifiques mycut2 &lt;- cut(numeric_matrix, breaks = c(1, 10, 100), include.lowest = TRUE) # classes [1, 10], ]10, 100] head(mycut2) ## [1] [1,10] [1,10] [1,10] [1,10] [1,10] [1,10] ## Levels: [1,10] (10,100] table(mycut2) ## mycut2 ## [1,10] (10,100] ## 10 90 La fonction split permet de découper un ensemble selon des facteurs. Donc on peut combiner les fonctions cut et split pour décomposer un vecteur ou DF en liste de vecteurs/DF groupées par facteur. mysplit_list &lt;- split(numeric_matrix, mycut2) la fonction split fonctionne aussi sur des DF df &lt;- data.frame(value = sample(1:1000, size = 100), whatever = LETTERS[sample(1:length(LETTERS), size = 100, replace=TRUE)]) split(df, cut(df$value, 3)) ## $`(3.03,329]` ## value whatever ## 2 95 M ## 5 219 I ## 7 306 I ## 9 158 E ## 15 270 S ## 17 276 S ## 26 237 M ## 29 206 O ## 30 300 R ## 34 194 J ## 35 243 R ## 37 149 N ## 38 117 M ## 42 173 O ## 44 207 R ## 46 303 I ## 56 314 R ## 58 40 A ## 63 42 B ## 65 203 K ## 67 112 C ## 68 43 C ## 71 132 F ## 74 4 B ## 83 7 I ## 85 269 B ## 88 153 P ## 92 22 D ## 93 138 M ## 97 316 B ## ## $`(329,653]` ## value whatever ## 1 366 O ## 3 496 A ## 8 603 G ## 10 632 R ## 12 430 I ## 13 411 O ## 18 611 O ## 20 481 Q ## 25 340 A ## 28 634 X ## 32 450 R ## 33 438 M ## 47 610 U ## 48 619 G ## 51 423 I ## 54 530 T ## 62 466 P ## 64 485 W ## 66 574 U ## 69 465 S ## 73 594 J ## 79 384 A ## 81 420 R ## 82 525 A ## 87 424 X ## 89 376 X ## 90 391 D ## 91 469 S ## 94 352 Q ## 96 542 Z ## 98 584 G ## 99 346 W ## ## $`(653,979]` ## value whatever ## 4 729 M ## 6 711 W ## 11 710 Z ## 14 665 A ## 16 796 X ## 19 749 D ## 21 971 R ## 22 809 F ## 23 798 S ## 24 677 K ## 27 680 A ## 31 675 U ## 36 705 W ## 39 801 N ## 40 779 N ## 41 935 Y ## 43 730 S ## 45 663 W ## 49 978 R ## 50 773 N ## 52 934 O ## 53 972 T ## 55 884 C ## 57 973 Y ## 59 851 H ## 60 664 G ## 61 831 V ## 70 887 A ## 72 898 L ## 75 930 E ## 76 765 S ## 77 956 W ## 78 689 D ## 80 920 J ## 84 861 C ## 86 781 K ## 95 679 F ## 100 739 H 1.3 Advanced R The book Advanced R explains a lot of fundamental aspects of the R language. The library lobstr allows to check the size of a variable library(lobstr) obj_size(1) ## 56 B Main object types t1 &lt;- c(1:5) show_type(t1) ## [1] 1 2 3 4 5 ## [1] &quot;integer&quot; ## int [1:5] 1 2 3 4 5 t2 &lt;- c(1.1, 1e2) show_type(t2) ## [1] 1.1 100.0 ## [1] &quot;double&quot; ## num [1:2] 1.1 100 t3 &lt;- c(&quot;dog&quot;, &quot;cat&quot;) show_type(t3) ## [1] &quot;dog&quot; &quot;cat&quot; ## [1] &quot;character&quot; ## chr [1:2] &quot;dog&quot; &quot;cat&quot; t4 &lt;- c(TRUE, FALSE) show_type(t4) ## [1] TRUE FALSE ## [1] &quot;logical&quot; ## logi [1:2] TRUE FALSE t5 &lt;- list(1:2, 2:3) show_type(t5) ## [[1]] ## [1] 1 2 ## ## [[2]] ## [1] 2 3 ## ## [1] &quot;list&quot; ## List of 2 ## $ : int [1:2] 1 2 ## $ : int [1:2] 2 3 t6 &lt;- data.frame(col1 = c(1:5), col2 = letters[1:5]) show_type(t6) ## col1 col2 ## 1 1 a ## 2 2 b ## 3 3 c ## 4 4 d ## 5 5 e ## [1] &quot;list&quot; ## &#39;data.frame&#39;: 5 obs. of 2 variables: ## $ col1: int 1 2 3 4 5 ## $ col2: Factor w/ 5 levels &quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,..: 1 2 3 4 5 "],
["resume-analysis.html", "Chapter 2 Resume analysis", " Chapter 2 Resume analysis FILENAME &lt;- paste(getwd(), &quot;/2019_last.docx&quot;, sep=&quot;&quot;) Filtre des occurences &gt; 5 "]
]
